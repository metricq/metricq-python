[metadata]
name = metricq
version = file: .version
author = TU Dresden
description = A highly-scalable, distributed metric data processing framework based on RabbitMQ
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/metricq/metricq-python
license = BSD 3-clause "New" or "Revised License"
license_file = LICENSE
classifiers =
    License :: OSI Approved :: BSD License
    Programming Language :: Python :: 3

[options]
python_requires = >=3.10

[options.package_data]
metricq = py.typed

# For runtime dependencies (install_requires), see setup.py.
# We need to dynamically determine a protobuf version, so we
# cannot put these dependencies here.

[options.extras_require]
examples =
    aiomonitor-ng
    click
    click-log
    click-completion
lint =
    black[jupyter] ~= 23.1.0
    flake8
    isort ~= 5.0
    check-manifest
    pre-commit
test =
    pytest
    pytest-asyncio
    pytest-mock
typing =
    mypy>=1.2.0
    mypy-protobuf
    types-Deprecated
    types-setuptools
    types-protobuf
    types-python-dateutil
    pandas-stubs ~= 2.0.1
    # To properly typecheck the full source including optionals, we must depend on them here
    %(pandas)s
    %(examples)s
    %(test)s
docs =
    sphinx ~= 6.1.3
    sphinx_rtd_theme ~= 1.2.0
    sphinx_autodoc_typehints ~= 1.22.0
    sphinxcontrib-trio ~= 1.1.2
    scanpydoc ~= 0.7.8
dev =
    %(test)s
    %(lint)s
    %(examples)s
    %(typing)s
    %(docs)s
    tox
pandas =
    pandas ~= 2.0.1

[flake8]
application-import-names =
    metricq,
    tests,
    examples
extend-exclude =
    *_pb2.py,
    *_pb2.pyi,
    build,
    .venv,
    venv
show-source = True
statistics = True
select =
    # Regular flake8 rules
    C, E, F, W
    # pep8-naming rules
    N
ignore =
    # E203: whitespace before ':' (not PEP8 compliant)
    E203
    # E501: line too long (black does that)
    E501
    # W503: line break before binary operator (not PEP8 compliant)
    W503

[mypy]
exclude = "^setup\.py$"

[tox:tox]
envlist =
    pytest
    black
    isort
    check-manifest
    flake8
    mypy


[testenv:pytest]
deps = .[test]
commands =
    pytest \
        --basetemp={envtmpdir} \
        {posargs}

[testenv:black]
deps = .[lint]
commands = black --check .

[testenv:isort]
deps = .[lint]
commands = isort --diff --check .

[testenv:check-manifest]
deps = .[lint]
commands = check-manifest

[testenv:flake8]
deps = .[lint]
commands = flake8 .

[testenv:mypy]
deps = .[typing]
commands = mypy --strict metricq examples tests setup.py
