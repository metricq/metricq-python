name: Python package

on: [push, pull_request, workflow_dispatch]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Protoc
      uses: arduino/setup-protoc@master
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[typing,lint,test]
    - name: Lint with flake8
      run: |
        flake8 .
    - name: Test with pytest
      run: |
        pytest
    - name: Format using black
      run: |
        black --check .
    - name: Sort imports with isort
      run: |
        isort --diff --check .
    - name: Build protobuf files
      run: python setup.py build_protobuf
    - name: Run mypy
      uses: kolonialno/mypy-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        max-errors: 0
        paths: metricq

  build:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install Protoc
      uses: Arduino/setup-protoc@master
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Build Python distribution
      run: pip wheel --wheel-dir dist/ .
    - name: Upload distribution artifacts
      uses: actions/upload-artifact@v2
      with:
        name: distribution-packages
        path: dist/metricq-*.whl

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && startsWith(github.event.ref, 'refs/tags/v')

    steps:
    - name: Download distribution artifacts
      uses: actions/download-artifact@v1
      with:
        name: distribution-packages
        path: dist/
    - name: Publish a Python distribution to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
    - name: Reformat version number
      id: reformat_release
      uses: frabert/replace-string-action@v1.1
      with:
        pattern: 'refs\/tags\/v([0-9.]+)'
        string: ${{ github.ref }}
        replace-with: '$1'
    - name: Generate release changelog
      uses: charmixer/auto-changelog-action@v1.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        since_tag: v${{ steps.reformat_release.outputs.replaced }}
        base: "none.md" # ignore the HISTORY.md file
        output: release-changelog.md
    - name: Upload release changelog artifact
      uses: actions/upload-artifact@v2
      with:
        name: release-changelog
        path: release-changelog.md
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Python Release ${{ steps.reformat_release.outputs.replaced }}
        draft: false
        prerelease: false
        body_path: release-changelog.md
